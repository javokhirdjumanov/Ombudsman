// <auto-generated />
using System;
using DataLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230614074222_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DomainLayer.Entities.DOC.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_at");

                    b.Property<string>("DocumentContent")
                        .HasColumnType("text")
                        .HasColumnName("document_content");

                    b.Property<int>("DocumentImportanceId")
                        .HasColumnType("integer")
                        .HasColumnName("document_importance_id");

                    b.Property<string>("DocumentName")
                        .HasColumnType("text")
                        .HasColumnName("document_name");

                    b.Property<int>("DocumentStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("document_status_id");

                    b.Property<DateTime?>("EstimatedExecutionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("estimated_execution_time");

                    b.Property<int?>("FileId")
                        .HasColumnType("integer")
                        .HasColumnName("file_id");

                    b.Property<int?>("InformationLetterId")
                        .HasColumnType("integer")
                        .HasColumnName("information_letter_id");

                    b.Property<int>("InitiativeTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("initiative_type_id");

                    b.Property<string>("MainMinistry")
                        .HasColumnType("text")
                        .HasColumnName("main_ministry");

                    b.Property<string>("MainPerformer")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("main_performer");

                    b.Property<DateTime?>("NormativeDocDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("normative_doc_date");

                    b.Property<int?>("NormativeDocNumber")
                        .HasColumnType("integer")
                        .HasColumnName("normative_doc_number");

                    b.Property<int>("NormativeDocumentId")
                        .HasColumnType("integer")
                        .HasColumnName("normative_document_id");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer")
                        .HasColumnName("organization_id");

                    b.Property<string>("Performers")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("performers");

                    b.Property<int?>("SectorId")
                        .HasColumnType("integer")
                        .HasColumnName("sector_id");

                    b.Property<DateTime?>("SendDocumentData")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("send_document_data");

                    b.Property<int?>("StateProgramId")
                        .HasColumnType("integer")
                        .HasColumnName("state_program_id");

                    b.Property<bool>("StateProgramIncluded")
                        .HasColumnType("boolean")
                        .HasColumnName("state_program_included");

                    b.HasKey("Id")
                        .HasName("pk_doc_documents");

                    b.HasIndex("DocumentImportanceId")
                        .HasDatabaseName("ix_doc_documents_document_importance_id");

                    b.HasIndex("DocumentStatusId")
                        .HasDatabaseName("ix_doc_documents_document_status_id");

                    b.HasIndex("FileId")
                        .HasDatabaseName("ix_doc_documents_file_id");

                    b.HasIndex("InformationLetterId")
                        .HasDatabaseName("ix_doc_documents_information_letter_id");

                    b.HasIndex("InitiativeTypeId")
                        .HasDatabaseName("ix_doc_documents_initiative_type_id");

                    b.HasIndex("NormativeDocumentId")
                        .HasDatabaseName("ix_doc_documents_normative_document_id");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("ix_doc_documents_organization_id");

                    b.HasIndex("SectorId")
                        .HasDatabaseName("ix_doc_documents_sector_id");

                    b.HasIndex("StateProgramId")
                        .HasDatabaseName("ix_doc_documents_state_program_id");

                    b.ToTable("doc_documents", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entities.DOC.Files.FileModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_doc_file_model");

                    b.ToTable("doc_file_model", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entities.DOC.InformationLetter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("InformationLetterDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("information_letter_date");

                    b.Property<int>("InformationLetterNumber")
                        .HasColumnType("integer")
                        .HasColumnName("information_letter_number");

                    b.Property<string>("InformationLetterText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("information_letter_text");

                    b.Property<string>("Performers")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("performers");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("ResponsibleEmployee")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("responsible_employee");

                    b.Property<int>("StateProgramId")
                        .HasColumnType("integer")
                        .HasColumnName("state_program_id");

                    b.HasKey("Id")
                        .HasName("pk_doc_information_letter");

                    b.HasIndex("StateProgramId")
                        .HasDatabaseName("ix_doc_information_letter_state_program_id");

                    b.ToTable("doc_information_letter", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entities.DOC.VisaHolders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_at");

                    b.Property<DateTime>("DateVisaAddition")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_visa_addition");

                    b.Property<int>("DocumentId")
                        .HasColumnType("integer")
                        .HasColumnName("document_id");

                    b.Property<string>("FIO")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fio");

                    b.Property<int?>("InformationLetterId")
                        .HasColumnType("integer")
                        .HasColumnName("information_letter_id");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer")
                        .HasColumnName("organization_id");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("position");

                    b.Property<string>("ResponsibleEmployee")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("responsible_employee");

                    b.HasKey("Id")
                        .HasName("pk_doc_visa_holders_for_doc");

                    b.HasIndex("DocumentId")
                        .HasDatabaseName("ix_doc_visa_holders_for_doc_document_id");

                    b.HasIndex("InformationLetterId")
                        .HasDatabaseName("ix_doc_visa_holders_for_doc_information_letter_id");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("ix_doc_visa_holders_for_doc_organization_id");

                    b.ToTable("doc_visa_holders_for_doc", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entities.ENUM.DocumentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.HasKey("Id")
                        .HasName("pk_enum_document_status");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_enum_document_status_status_id");

                    b.ToTable("enum_document_status", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entities.ENUM.DocumentStatusTranslate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("column_name");

                    b.Property<int>("DocumentStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("document_status_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer")
                        .HasColumnName("language_id");

                    b.Property<string>("TranslateText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("translate_text");

                    b.HasKey("Id")
                        .HasName("pk_enum_document_status_translate");

                    b.HasIndex("DocumentStatusId")
                        .HasDatabaseName("ix_enum_document_status_translate_document_status_id");

                    b.HasIndex("LanguageId")
                        .HasDatabaseName("ix_enum_document_status_translate_language_id");

                    b.ToTable("enum_document_status_translate", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entities.ENUM.InitiativeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Names")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("names");

                    b.HasKey("Id")
                        .HasName("pk_enum_initiative_type");

                    b.ToTable("enum_initiative_type", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entities.ENUM.InitiativeTypeTranslate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("column_name");

                    b.Property<int>("InitiativeTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("initiative_type_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer")
                        .HasColumnName("language_id");

                    b.Property<string>("TranslateText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("translate_text");

                    b.HasKey("Id")
                        .HasName("pk_enum_initiative_type_translate");

                    b.HasIndex("InitiativeTypeId")
                        .HasDatabaseName("ix_enum_initiative_type_translate_initiative_type_id");

                    b.HasIndex("LanguageId")
                        .HasDatabaseName("ix_enum_initiative_type_translate_language_id");

                    b.ToTable("enum_initiative_type_translate", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entities.ENUM.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.HasKey("Id")
                        .HasName("pk_enum_language");

                    b.ToTable("enum_language", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entities.ENUM.NormativeDocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.Property<string>("ShortCharacter")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("short_character");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.HasKey("Id")
                        .HasName("pk_enum_normative_document");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_enum_normative_document_status_id");

                    b.ToTable("enum_normative_document", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entities.ENUM.NormativeDocumentTypeTranslate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("column_name");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer")
                        .HasColumnName("language_id");

                    b.Property<int>("NormativeDocumentTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("normative_document_type_id");

                    b.Property<string>("TranslateText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("translate_text");

                    b.HasKey("Id")
                        .HasName("pk_enum_normative_document_translate");

                    b.HasIndex("LanguageId")
                        .HasDatabaseName("ix_enum_normative_document_translate_language_id");

                    b.HasIndex("NormativeDocumentTypeId")
                        .HasDatabaseName("ix_enum_normative_document_translate_normative_document_type_id");

                    b.ToTable("enum_normative_document_translate", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entities.ENUM.PerformerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.HasKey("Id")
                        .HasName("pk_enum_performer_type");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_enum_performer_type_status_id");

                    b.ToTable("enum_performer_type", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entities.ENUM.PerformerTypeTranslate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("column_name");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer")
                        .HasColumnName("language_id");

                    b.Property<int>("PerformerTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("performer_type_id");

                    b.Property<string>("TranslateText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("translate_text");

                    b.HasKey("Id")
                        .HasName("pk_enum_performer_type_translate");

                    b.HasIndex("LanguageId")
                        .HasDatabaseName("ix_enum_performer_type_translate_language_id");

                    b.HasIndex("PerformerTypeId")
                        .HasDatabaseName("ix_enum_performer_type_translate_performer_type_id");

                    b.ToTable("enum_performer_type_translate", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entities.ENUM.StateOrganization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.HasKey("Id")
                        .HasName("pk_enum_state_organization");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_enum_state_organization_status_id");

                    b.ToTable("enum_state_organization", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entities.ENUM.StateOrganizationTranslate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("column_name");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer")
                        .HasColumnName("language_id");

                    b.Property<int>("StateOrganizationId")
                        .HasColumnType("integer")
                        .HasColumnName("state_organization_id");

                    b.Property<string>("TranslateText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("translate_text");

                    b.HasKey("Id")
                        .HasName("pk_enum_state_organization_translate");

                    b.HasIndex("LanguageId")
                        .HasDatabaseName("ix_enum_state_organization_translate_language_id");

                    b.HasIndex("StateOrganizationId")
                        .HasDatabaseName("ix_enum_state_organization_translate_state_organization_id");

                    b.ToTable("enum_state_organization_translate", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entities.ENUM.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_enum_status");

                    b.ToTable("enum_status", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entities.ENUM.StatusTranslate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("column_name");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer")
                        .HasColumnName("language_id");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.Property<string>("TranslateText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("translate_text");

                    b.HasKey("Id")
                        .HasName("pk_enum_status_translate");

                    b.HasIndex("LanguageId")
                        .HasDatabaseName("ix_enum_status_translate_language_id");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_enum_status_translate_status_id");

                    b.ToTable("enum_status_translate", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entities.INFO.DocumentImportance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.HasKey("Id")
                        .HasName("pk_info_document_importance");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_info_document_importance_status_id");

                    b.ToTable("info_document_importance", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entities.INFO.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsGrouper")
                        .HasColumnType("boolean")
                        .HasColumnName("is_grouper");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer")
                        .HasColumnName("organization_id");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.Property<int>("StateOrganizationId")
                        .HasColumnType("integer")
                        .HasColumnName("state_organization_id");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.HasKey("Id")
                        .HasName("pk_info_organization");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("ix_info_organization_organization_id");

                    b.HasIndex("StateOrganizationId")
                        .HasDatabaseName("ix_info_organization_state_organization_id");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_info_organization_status_id");

                    b.ToTable("info_organization", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entities.INFO.Sectors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.Property<int>("SectorNumber")
                        .HasColumnType("integer")
                        .HasColumnName("sector_number");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.HasKey("Id")
                        .HasName("pk_info_sectors");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_info_sectors_status_id");

                    b.ToTable("info_sectors", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entities.INFO.StateProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.HasKey("Id")
                        .HasName("pk_info_state_program");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_info_state_program_status_id");

                    b.ToTable("info_state_program", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Entities.DOC.Document", b =>
                {
                    b.HasOne("DomainLayer.Entities.INFO.DocumentImportance", "DocumentImportance")
                        .WithMany()
                        .HasForeignKey("DocumentImportanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_doc_documents_info_document_importance_document_importance_");

                    b.HasOne("DomainLayer.Entities.ENUM.DocumentStatus", "DocumentStatus")
                        .WithMany()
                        .HasForeignKey("DocumentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_doc_documents_enum_document_status_document_status_id");

                    b.HasOne("DomainLayer.Entities.DOC.Files.FileModel", "Files")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .HasConstraintName("fk_doc_documents_doc_file_model_file_id");

                    b.HasOne("DomainLayer.Entities.DOC.InformationLetter", "InformationLetter")
                        .WithMany()
                        .HasForeignKey("InformationLetterId")
                        .HasConstraintName("fk_doc_documents_doc_information_letter_information_letter_id");

                    b.HasOne("DomainLayer.Entities.ENUM.InitiativeType", "InitiativeType")
                        .WithMany()
                        .HasForeignKey("InitiativeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_doc_documents_enum_initiative_type_initiative_type_id");

                    b.HasOne("DomainLayer.Entities.ENUM.NormativeDocumentType", "NormativeDocument")
                        .WithMany()
                        .HasForeignKey("NormativeDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_doc_documents_enum_normative_document_normative_document_id");

                    b.HasOne("DomainLayer.Entities.INFO.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_doc_documents_info_organization_organization_id");

                    b.HasOne("DomainLayer.Entities.INFO.Sectors", "Sector")
                        .WithMany()
                        .HasForeignKey("SectorId")
                        .HasConstraintName("fk_doc_documents_info_sectors_sector_id");

                    b.HasOne("DomainLayer.Entities.INFO.StateProgram", "StateProgram")
                        .WithMany()
                        .HasForeignKey("StateProgramId")
                        .HasConstraintName("fk_doc_documents_info_state_program_state_program_id");

                    b.Navigation("DocumentImportance");

                    b.Navigation("DocumentStatus");

                    b.Navigation("Files");

                    b.Navigation("InformationLetter");

                    b.Navigation("InitiativeType");

                    b.Navigation("NormativeDocument");

                    b.Navigation("Organization");

                    b.Navigation("Sector");

                    b.Navigation("StateProgram");
                });

            modelBuilder.Entity("DomainLayer.Entities.DOC.InformationLetter", b =>
                {
                    b.HasOne("DomainLayer.Entities.INFO.StateProgram", "StateProgram")
                        .WithMany()
                        .HasForeignKey("StateProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_doc_information_letter_info_state_program_state_program_id");

                    b.Navigation("StateProgram");
                });

            modelBuilder.Entity("DomainLayer.Entities.DOC.VisaHolders", b =>
                {
                    b.HasOne("DomainLayer.Entities.DOC.Document", "HolderDocument")
                        .WithMany("VisaHolders")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_doc_visa_holders_for_doc_doc_documents_document_id");

                    b.HasOne("DomainLayer.Entities.DOC.InformationLetter", "HolderInformationLetter")
                        .WithMany("VisaHolders")
                        .HasForeignKey("InformationLetterId")
                        .HasConstraintName("fk_doc_visa_holders_for_doc_doc_information_letter_information");

                    b.HasOne("DomainLayer.Entities.INFO.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_doc_visa_holders_for_doc_info_organization_organization_id");

                    b.Navigation("HolderDocument");

                    b.Navigation("HolderInformationLetter");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("DomainLayer.Entities.ENUM.DocumentStatus", b =>
                {
                    b.HasOne("DomainLayer.Entities.ENUM.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enum_document_status_enum_status_status_id");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("DomainLayer.Entities.ENUM.DocumentStatusTranslate", b =>
                {
                    b.HasOne("DomainLayer.Entities.ENUM.DocumentStatus", "DocumentStatus")
                        .WithMany()
                        .HasForeignKey("DocumentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enum_document_status_translate_enum_document_status_documen");

                    b.HasOne("DomainLayer.Entities.ENUM.Language", "Languages")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enum_document_status_translate_enum_language_language_id");

                    b.Navigation("DocumentStatus");

                    b.Navigation("Languages");
                });

            modelBuilder.Entity("DomainLayer.Entities.ENUM.InitiativeTypeTranslate", b =>
                {
                    b.HasOne("DomainLayer.Entities.ENUM.InitiativeType", "InitiativeType")
                        .WithMany()
                        .HasForeignKey("InitiativeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enum_initiative_type_translate_enum_initiative_type_initiat");

                    b.HasOne("DomainLayer.Entities.ENUM.Language", "Languages")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enum_initiative_type_translate_enum_language_language_id");

                    b.Navigation("InitiativeType");

                    b.Navigation("Languages");
                });

            modelBuilder.Entity("DomainLayer.Entities.ENUM.NormativeDocumentType", b =>
                {
                    b.HasOne("DomainLayer.Entities.ENUM.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enum_normative_document_enum_status_status_id");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("DomainLayer.Entities.ENUM.NormativeDocumentTypeTranslate", b =>
                {
                    b.HasOne("DomainLayer.Entities.ENUM.Language", "Languages")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enum_normative_document_translate_enum_language_language_id");

                    b.HasOne("DomainLayer.Entities.ENUM.NormativeDocumentType", "NormativeDocumentType")
                        .WithMany()
                        .HasForeignKey("NormativeDocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enum_normative_document_translate_enum_normative_document_n");

                    b.Navigation("Languages");

                    b.Navigation("NormativeDocumentType");
                });

            modelBuilder.Entity("DomainLayer.Entities.ENUM.PerformerType", b =>
                {
                    b.HasOne("DomainLayer.Entities.ENUM.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enum_performer_type_enum_status_status_id");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("DomainLayer.Entities.ENUM.PerformerTypeTranslate", b =>
                {
                    b.HasOne("DomainLayer.Entities.ENUM.Language", "Languages")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enum_performer_type_translate_enum_language_language_id");

                    b.HasOne("DomainLayer.Entities.ENUM.PerformerType", "PerformerType")
                        .WithMany()
                        .HasForeignKey("PerformerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enum_performer_type_translate_enum_performer_type_performer");

                    b.Navigation("Languages");

                    b.Navigation("PerformerType");
                });

            modelBuilder.Entity("DomainLayer.Entities.ENUM.StateOrganization", b =>
                {
                    b.HasOne("DomainLayer.Entities.ENUM.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enum_state_organization_enum_status_status_id");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("DomainLayer.Entities.ENUM.StateOrganizationTranslate", b =>
                {
                    b.HasOne("DomainLayer.Entities.ENUM.Language", "Languages")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enum_state_organization_translate_enum_language_language_id");

                    b.HasOne("DomainLayer.Entities.ENUM.StateOrganization", "StateOrganization")
                        .WithMany()
                        .HasForeignKey("StateOrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enum_state_organization_translate_enum_state_organization_s");

                    b.Navigation("Languages");

                    b.Navigation("StateOrganization");
                });

            modelBuilder.Entity("DomainLayer.Entities.ENUM.StatusTranslate", b =>
                {
                    b.HasOne("DomainLayer.Entities.ENUM.Language", "Languages")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enum_status_translate_enum_language_language_id");

                    b.HasOne("DomainLayer.Entities.ENUM.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_enum_status_translate_enum_status_status_id");

                    b.Navigation("Languages");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("DomainLayer.Entities.INFO.DocumentImportance", b =>
                {
                    b.HasOne("DomainLayer.Entities.ENUM.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_info_document_importance_enum_status_status_id");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("DomainLayer.Entities.INFO.Organization", b =>
                {
                    b.HasOne("DomainLayer.Entities.INFO.Organization", "SuperiorOrganization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_info_organization_info_organization_organization_id");

                    b.HasOne("DomainLayer.Entities.ENUM.StateOrganization", "StateOrganization")
                        .WithMany()
                        .HasForeignKey("StateOrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_info_organization_enum_state_organization_state_organizatio");

                    b.HasOne("DomainLayer.Entities.ENUM.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_info_organization_enum_status_status_id");

                    b.Navigation("StateOrganization");

                    b.Navigation("Status");

                    b.Navigation("SuperiorOrganization");
                });

            modelBuilder.Entity("DomainLayer.Entities.INFO.Sectors", b =>
                {
                    b.HasOne("DomainLayer.Entities.ENUM.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_info_sectors_enum_status_status_id");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("DomainLayer.Entities.INFO.StateProgram", b =>
                {
                    b.HasOne("DomainLayer.Entities.ENUM.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_info_state_program_enum_status_status_id");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("DomainLayer.Entities.DOC.Document", b =>
                {
                    b.Navigation("VisaHolders");
                });

            modelBuilder.Entity("DomainLayer.Entities.DOC.InformationLetter", b =>
                {
                    b.Navigation("VisaHolders");
                });
#pragma warning restore 612, 618
        }
    }
}
